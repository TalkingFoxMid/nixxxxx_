;; Define variables and polling
(defpoll time :interval "1s" "date '+%H:%M'")
(defpoll date :interval "1m" "date '+%b %d, %Y'")
(defpoll volume :interval "200ms" "scripts/get_volume")
(defpoll cpu_temp :interval "3s" "scripts/get_cpu_temp")
(defpoll gpu_temp :interval "3s" "scripts/get_gpu_temp")
(defpoll network :interval "5s" "scripts/get_network")
(defpoll active_workspace :interval "100ms" "hyprctl activeworkspace | grep 'workspace ID' | head -n 1 | awk '{print $3}'")

;; Widget definitions
(defwidget bar []
  (centerbox :orientation "h" :class "bar"
    (left)
    (center)
    (right)))

(defwidget left []
  (box :orientation "h" :halign "start" :space-evenly false
    (workspaces)
    (system)))

(defwidget center []
  (box :orientation "h" :halign "center" :space-evenly false
    (time-module)))

(defwidget right []
  (box :orientation "h" :halign "end" :space-evenly false
    (volume-module)))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
  (box
      :space-evenly true
      (for i in "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        (button
          :class "workspace-button ${active_workspace == i ? 'active' : ''}"
          :onclick "hyprctl dispatch workspace ${i}"
          {i == 10 ? "0" : i})))
    (button
      :class "workspace-button ${active_workspace == 11 ? 'active' : ''}"
      :onclick "hyprctl dispatch workspace 11"
      "")))

(defwidget system []
  (box :class "system-info"
       :orientation "h"
       :space-evenly false 
    (box :class "cpu-temp-box"
      (label :class "cpu-temp-label" :text "CPU")
      (label :class "cpu-temp-value" :text "${cpu_temp}°C"))
    (box :class "gpu-temp-box"
      (label :class "gpu-temp-label" :text "GPU")
      (label :class "gpu-temp-value" :text "${gpu_temp}°C"))))

(defwidget time-module []
  (box :class "time-info"
       :orientation "h"
       :space-evenly false
    (label :class "time" :text time)
    (label :class "date" :text date)))

(defwidget volume-module []
  (box :class "volume-box"
       :orientation "h"
       :space-evenly false
    (label :class "volume-icon" :text "")
    (label :class "volume-value" :text "${volume}%")))

;; Windows
(defwindow bar
  :monitor 0
  :exclusive true
  :geometry (geometry :x "0%"
                     :y "10px"
                     :width "100%"
                     :height "30px"
                     :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore false
  (bar))
